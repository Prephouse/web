{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"]
  },
  "env": {
    "es2021": true,
    "node": true,
    "browser": true,
    "jest": true
  },
  "plugins": [
    "@typescript-eslint",
    "eslint-comments",
    "formatjs",
    "import",
    "jest",
    "promise",
    "react",
    "react-hooks"
  ],
  "extends": [
    "airbnb",
    "airbnb-typescript",
    "airbnb/hooks",
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:etc/recommended",
    "plugin:jest/recommended",
    "plugin:promise/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/array-type": ["error", { "array-simple": true }],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": ["variable"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": ["variable"],
        "types": ["function"],
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["property", "function", "method"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "filter": {
          "regex": "[- ]",
          "match": false
        }
      },
      {
        "selector": ["variable", "property"],
        "modifiers": ["const"],
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "objectLiteralProperty",
        "format": null,
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": ["class", "interface", "enum", "enumMember"],
        "format": ["PascalCase"]
      }
    ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
    "@typescript-eslint/no-unnecessary-qualifier": "warn",
    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/prefer-readonly": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "etc/no-commented-out-code": "warn",
    "etc/no-const-enum": ["error", { "allowLocal": true }], // const enums are erased at compile-time and thus, when exported, become problematic in JS
    "etc/throw-error": "error",
    "formatjs/enforce-placeholders": "error",
    "formatjs/no-camel-case": "error",
    "formatjs/no-emoji": "error",
    "formatjs/no-multiple-whitespaces": "error",
    "formatjs/no-offset": "error",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "import/no-relative-parent-imports": "error",
    "import/order": "off", // prevent conflicts with the Trivago import sorting prettier plugin
    "import/prefer-default-export": "off",
    "no-console": "warn",
    "no-restricted-imports": [
      "error",
      { "patterns": ["@mui/*/*/*", "!@mui/material/test-utils/*"] }
    ],
    "no-useless-return": "warn",
    "promise/always-return": "off",
    "promise/catch-or-return": "off",
    "radix": "error", // for radix = 10 on integers, use the parseStrictDecInt function in utils/string.ts instead
    "react/function-component-definition": ["error", { "namedComponents": "arrow-function" }],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/require-default-props": "off"
  },
  "ignorePatterns": [".eslintrc.i18n.js", "src/serviceWorker.ts"],
  "overrides": [
    {
      "files": ["src/states/**/actions.ts", "src/states/**/reducer.ts"],
      "rules": {
        "func-names": "off",
        "no-param-reassign": "off"
      }
    }
  ]
}
